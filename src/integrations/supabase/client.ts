
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bfmxxuarnqmxqqnpxqjf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJmbXh4dWFybnFteHFxbnB4cWpmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxMTc4ODMsImV4cCI6MjA2MTY5Mzg4M30.MAQZ7I3pshciBJANhlPThK6XBxGemIPgflsMDz3OB_4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create client with proper session persistence for production use
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true, // Enable session persistence
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storage: {
        // Use both local and session storage for better persistence
        getItem: (key) => {
          return localStorage.getItem(key) || sessionStorage.getItem(key);
        },
        setItem: (key, value) => {
          localStorage.setItem(key, value);
          sessionStorage.setItem(key, value);
        },
        removeItem: (key) => {
          localStorage.removeItem(key);
          sessionStorage.removeItem(key);
        }
      }
    },
    global: {
      fetch: (url, options) => {
        return fetch(url, { 
          ...options, 
          signal: AbortSignal.timeout(15000) // 15 second timeout
        });
      }
    }
  }
);

// Clear auth data properly on logout
export const clearAuthData = async () => {
  try {
    // First sign out from Supabase
    await supabase.auth.signOut();
    
    // Then clear localStorage and sessionStorage
    const authKeys = ['supabase.auth.token', 'cachedUser'];
    
    // Clear profile-related items
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('profile_') || authKeys.includes(key)) {
        localStorage.removeItem(key);
      }
    });
    
    Object.keys(sessionStorage).forEach(key => {
      if (key.startsWith('profile_') || authKeys.includes(key)) {
        sessionStorage.removeItem(key);
      }
    });
    
    console.log('Auth data cleared successfully');
    return true;
  } catch (error) {
    console.error('Error clearing auth data:', error);
    return false;
  }
};

// Add helper functions to safely handle data retrieval
export const getDataOrNull = <T>(response: { data: T | null, error: any }): T | null => {
  if (response.error) {
    console.error("Supabase query error:", response.error);
    return null;
  }
  return response.data;
};
